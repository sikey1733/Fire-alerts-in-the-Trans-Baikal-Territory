name: ðŸ”¥ Fire Risk Daily Pipeline

on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

jobs:
  run-r-script:
    runs-on: ubuntu-latest

    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      VIIRS_KEY: ${{ secrets.VIIRS_KEY }}
      CDS_API_KEY: ${{ secrets.CDS_API_KEY }}
      CDS_USER_ID: ${{ secrets.CDS_USER_ID }}

    steps:
      - name: ðŸ”½ Checkout repository
        uses: actions/checkout@v4

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/r-lib
          key: ${{ runner.os }}-r-packages-${{ hashFiles('**/*.R') }}
          restore-keys: |
            ${{ runner.os }}-r-packages-

      - name: Install dependencies
        env:
          R_LIBS_USER: ${{ github.workspace }}/r-lib
        run: |
          mkdir -p $R_LIBS_USER
          Rscript -e 'pkgs <- c("ecmwfr", "tidyverse", "stars", "openair", "httr", "lubridate", "osmdata", "sf", "leaflet", "geosphere", "mapview", "htmlwidgets", "webshot", "ggplot2", "rmarkdown", "curl", "xml2"); \
                      new <- pkgs[!(pkgs %in% installed.packages(lib.loc=Sys.getenv("R_LIBS_USER"))[, "Package"])]; \
                      if(length(new)) install.packages(new, lib=Sys.getenv("R_LIBS_USER"))'
          Rscript -e 'webshot::install_phantomjs()'

      - name: Run main R script
        env:
          R_LIBS_USER: ${{ github.workspace }}/r-lib
        run: Rscript -e "source('pipeline.R'); main()"

      - name: Create output directory
        run: mkdir -p output

      - name: Upload output artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output-plots
          path: output/
